@page "/hangman"
@using BlazorApp.Client.Shared
<div class="background">
<div class="container-fluid">

<PageTitle>Hangman Game</PageTitle>

<!-- Game Header Card -->
<div class="game-header">
    <div class="row align-items-center g-3">
        <div class="col-auto">
            <h1 class="game-title">üé™ Hangman</h1>
        </div>
        <div class="col-auto">
            <button accesskey='1' class='btn control-btn' @onclick="(() => StartNewGame())">
                üéØ <u>1</u> New Word
            </button>
        </div>
        <div class="col-auto">
            <div class="header-stats">
                <div class="header-stat correct">
                    <span class="stat-number">@(CorrectGuesses?.Count ?? 0)</span>
                    <span class="stat-label">‚úÖ Correct</span>
                </div>
                <div class="header-stat incorrect">
                    <span class="stat-number">@(IncorrectGuesses?.Count ?? 0)</span>
                    <span class="stat-label">‚ùå Incorrect</span>
                </div>
            </div>
        </div>
        @if (GameStatus.Contains("You lose!") || GameStatus == "You win!")
        {
            <div class="col-auto">
                <button accesskey='2' class='btn control-btn btn-secondary' @onclick="(() => StartNewGame())">
                    üîÑ <u>2</u> Play Again
                </button>
            </div>
        }
    </div>
    
    @if (!ApiKeyAvailable)
    {
        <div class="api-key-section mt-3">
            <div class="alert alert-info">
                <strong>üîë Optional:</strong> Enter your Words API key for more word variety, or play with built-in words.
            </div>
            <ApiKeyEntry OnApiKeySaved="OnApiKeySaved" />
        </div>
    }
</div>

<!-- Game Content Card -->
<div class="game-content">
    <div class='row g-4'>
        <div class='col-lg-8'>
            <!-- Word Display Section -->
            <div class="word-section">
                <h2 class="section-title">üéØ Guess the Word</h2>
                @if (loading)
                {
                    <div class="loading-section">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading new word...</p>
                    </div>
                }
                else if (CurrentWord != null)
                {
                    <div class="word-display">
                        @foreach (char letter in CurrentWord)
                        {
                            if (CorrectGuesses.Contains(letter))
                            {
                                <span class='word-letter revealed'>@letter</span>
                            }
                            else if (letter == ' ')
                            {
                                <span class='word-letter space'>/</span>
                            }
                            else
                            {
                                <span class='word-letter hidden'>_</span>
                            }
                        }
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(WordDescription))
                {
                    <div class="word-description">
                        <h3 class="description-text">üí° @WordDescription</h3>
                    </div>
                }

                @if (!string.IsNullOrEmpty(CurrentWord))
                {
                    <div class="word-source">
                        @if (UsingApiWords)
                        {
                            <span class="badge source-badge api">üåê Words API</span>
                        }
                        else
                        {
                            <span class="badge source-badge builtin">üìö Built-in Words</span>
                        }
                    </div>
                }
            </div>

            <!-- Game Status Section -->
            @if (GameStatus.Contains("You lose!") || GameStatus == "You win!")
            {
                <div class="game-status @(GameStatus == "You win!" ? "win" : "lose")">
                    <h1 class="status-text">@GameStatus</h1>
                </div>
            }
        </div>
        
        <!-- Hangman SVG Section -->
        <div class='col-lg-4'>
            <div class="hangman-section compact">
                <HangmanSvg Stage="@(IncorrectGuesses != null ? IncorrectGuesses.Count : 0)" />
            </div>
        </div>
    </div>
    
    <!-- Letter Selection Section - Now Full Width -->
    @if (CorrectGuesses != null && IncorrectGuesses != null)
    {
        <div class="letters-section full-width">
            <h3 class="section-title">üî§ Select a Letter</h3>
            <div class='letters-grid'>
                @foreach (var letter in Alphabet.OrderBy(x => x))
                {
                    if (CorrectGuesses.Contains(letter) || IncorrectGuesses.Contains(letter))
                    {
                        <button class='letter-btn used' disabled>
                            @letter
                        </button>
                    }
                    else
                    {
                        <button accesskey='@letter' class='letter-btn available'
                            @onclick="(() => MakeGuess(letter))">
                            @letter
                        </button>
                    }
                }
            </div>
        </div>
    }
</div>

<!-- Sound Effects -->
@if (GameStatus == "You win!")
{
    <PlaySound AnswerState=true Play=true />
}
else if (GameStatus.Contains("You lose!"))
{
    <PlaySound AnswerState=false Play=true />
}
else
{
    <PlaySound AnswerState=false Play=false />
}

</div>
</div>
