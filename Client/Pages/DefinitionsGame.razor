@page "/definitions"
@using BlazorApp.Client.Shared

<div class="background">
<div class="container-fluid">

<!-- Game Header Card -->
<div class="game-header">
    <div class="row align-items-center g-3">
        @if (!ApiKeyAvailable || (!isLoading && LoadWordResults == null && !string.IsNullOrEmpty(Message)))
        {
            <div class="col-12">
                <div class="api-key-section">
                    <ApiKeyEntry OnApiKeySaved="OnApiKeySaved" />
                    <div class="alert alert-info mt-3">📚 Please enter your Words API key to play the definitions game!</div>
                    @if (ApiKeyAvailable && !string.IsNullOrEmpty(Message))
                    {
                        <button class="btn control-btn btn-secondary mt-2" @onclick="OnChangeApiKey">
                            🔑 Change API Key
                        </button>
                    }
                </div>
            </div>
        }
        else if (ApiKeyAvailable)
        {
            <div class="col-auto">
                <button class="btn control-btn btn-secondary" @onclick="OnChangeApiKey">
                    🔑 Change API Key
                </button>
            </div>
        }
        
        <div class="col-auto">
            <button @ref="LoadWordsButton" class="btn control-btn" accesskey="w" @onclick="LoadWordAsync">
                📖 Load Words / Reset
            </button>
            <span class="level-badge">Level @(wordsToLoad-1)</span>
        </div>
        
        <div class="col-auto">
            <button class="btn control-btn btn-secondary" type="button" @onclick="ShowOptions">
                ⚙️ Options
            </button>
        </div>
    </div>

    @if ((GameOptions?.ShowOptions ?? false))
    {
        <div class="options-panel mt-3">
            <h5 class="mb-3">📚 Game Options</h5>
            <form>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Maximum Word Length</label>
                        <input required min="2" max="60" step="1" class="form-control modern-input" 
                               placeholder="Max Length" type="number" @bind="GameOptions.MaximumWordLength" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Begins With</label>
                        <input class="form-control modern-input" maxlength="@GameOptions.MaximumWordLength" 
                               placeholder="Starting letters" type="text" @bind="GameOptions.BeginsWith" />
                    </div>
                </div>
            </form>
        </div>
    }
</div>
<!-- Congratulations Section -->
@if (questionsCorrect == wordsToLoad)
{
    <div class="congratulations">
        <h1 class="d-none d-lg-block">🎉 Congratulations! Next Level! ✨</h1>
        <h5 class="d-lg-none">🎉 Congratulations! Next Level! ✨</h5>
        <img src="/images/Fireworks.gif" class="d-none d-lg-block" alt="Celebration fireworks" />
        <img src="/images/Fireworks.gif" width="200" class="d-lg-none" alt="Celebration fireworks" />
    </div>
}

<!-- Main Game Area -->
@if (!isLoading && LoadWordResults?.WordResults != null)
{
    @* Index is reset in code-behind before rendering *@
    @if (ShowWord == true)
    {
        @if (LoadWordResults?.WordResults != null && ShowWord == true)
        {
            <div class="word-display-area">
                <h3 class="d-none d-lg-block mb-3">📝 Current Word</h3>
                <h6 class="d-lg-none mb-3">📝 Current Word</h6>
                @if (WordResult != null)
                {
                    <div class="current-word current-word-desktop d-none d-lg-block">
                        @WordResult.word
                    </div>
                    <div class="current-word current-word-mobile d-lg-none">
                        @WordResult.word
                    </div>
                }
            </div>
        }
        
        <div class="instruction-text">
            🎯 Select the definition that matches the word above
        </div>
    }
    
    <!-- Definitions Selection Area -->
    <div class="definitions-selection-area">
        @if (AnswerOptions != null && AnswerOptions.Count > 0)
        {
            @for (int i = 0; i < AnswerOptions.Count; i++)
            {
                var option = AnswerOptions[i];
                var buttonIndex = i; // Capture the index for the closure
                <button accesskey="@((i+1)<10 ? (i+1).ToString():"")" 
                        @onclick="@(() => CheckAnswerAsync(option.Word, buttonIndex))" 
                        class="btn definition-btn @(buttonIndex < ButtonClass.Count ? ButtonClass[buttonIndex] : "")">
                    <span class="definition-number">@((i+1)<10?(i+1).ToString():"")</span>
                    <span class="flex-grow-1">
                        @option.Definition
                        @if (!string.IsNullOrWhiteSpace(option.PartOfSpeech))
                        {
                            <span class="part-of-speech">@option.PartOfSpeech</span>
                        }
                    </span>
                </button>
            }
        }
    </div>
    <!-- Error Messages -->
    @if (Message != null)
    {
        <div class="error-card">
            <h4 class="text-danger">⚠️ Unexpected Error</h4>
            <p class="text-danger mb-2">Please load another word to continue.</p>
            <div class="text-danger mb-3">@Message</div>
            <details class="mt-3">
                <summary class="text-muted">Technical Details (JSON Response)</summary>
                <pre class="text-muted mt-2"><code>@result</code></pre>
            </details>
        </div>
    }

    <!-- Response Messages -->
    @if (response != null)
    {
        <div class="text-center my-3">
            @if (response.Contains("✖"))
            {
                <h2 class='text-danger'>@response</h2>
            }
            else
            {
                <h2 class='text-success'>@response</h2>
            }
        </div>
    }
}
else if (isLoading)
{
    <div class="loader">
        <div class="text-center">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h4>📚 LOADING DEFINITIONS...</h4>
            <p class="text-muted">Preparing your vocabulary challenge</p>
        </div>
    </div>
}
else
{
    <div class="error-card">
        <div class="text-danger">@Message</div>
        @if (!ApiKeyAvailable)
        {
            <div class="api-key-section mt-3">
                <p class="mt-2">📚 Please enter your Words API key above to play the definitions game.</p>
            </div>
        }
        else
        {
            <div class="mt-3">
                <button class="btn control-btn me-2" @onclick="LoadWordAsync">🔄 Try Again</button>
                <button class="btn control-btn btn-secondary" @onclick="OnChangeApiKey">🔑 Change API Key</button>
            </div>
            @if (Message != null && (Message.Contains("403") || Message.Contains("Forbidden")))
            {
                <div class="alert alert-warning mt-3">
                    <strong>🔐 API Key Issue:</strong> This might be due to an invalid API key, CORS restrictions in development, or quota limits. 
                    Try changing your API key or test on the production site.
                </div>
            }
        }
    </div>
}

<!-- Audio Component -->
@if (AnswerState && PlayAudio)
{
    <PlaySound AnswerState=true Play=true />
}
else if (PlayAudio)
{
    <PlaySound AnswerState=false Play=true />
}
else
{
    <PlaySound AnswerState=false Play=false />
}

</div>
</div>