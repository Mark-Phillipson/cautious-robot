@page "/definitions"
<div class="background">
<div class="row align-items-center g-2">
    @if (!HideKey)
    {
        <div class="col-auto">
            <label class="visually-hidden">API Key</label>
            <input class="form-control" placeholder="API Key" type="password" style="width:200px" @bind="@GameOptions.APIKey" />
        </div>
    }
    <div class="col-auto">
        <button @ref="LoadWordsButton" class="btn btn-primary btn-lg" accesskey="w" @onclick="LoadWordAsync">
            Load Words / Reset
        </button>
        <label>Level: <span class="badge bg-warning">@(wordsToLoad-1)</span> </label>
    </div>
    <div class="col-auto">
        <button class="btn btn-success" type="button" @onclick="@( ( ) => ShowOptions() )">Options >></button>
    </div>

    @if ((GameOptions?.ShowOptions ?? false))
    {
        <form>
            <div class="col-auto">
                <label class="d-none d-lg-block col-form-label-lg">Maximum Word Length</label>
                <div class='d-none d-lg-block'>
                    <input required min="2" max="60" step="1" class="form-control" placeholder="Max Length" type="number" style="width:150px" @bind="@GameOptions.MaximumWordLength" />

                </div>
                <div class='d-lg-none'>
                    <input class="form-control" placeholder="Max Len." style="width:min-content" type="number" @bind="@GameOptions.MaximumWordLength" />
                </div>
            </div>
            <div class="col-auto">
                <label class="d-none d-lg-block col-form-label-lg">Begins With</label>
                <div class='d-none d-lg-block'>
                    <input class="form-control" maxlength="@GameOptions.MaximumWordLength" placeholder="Begins With" type="text" style="width:138px" @bind="@GameOptions.BeginsWith" />
                </div>
                <div class='d-lg-none'>
                    <input class="form-control" placeholder="Begins With" style="width:min-content" type="text" @bind="@GameOptions.BeginsWith" />
                </div>
            </div>
        </form>
    }
</div>

<hr />
@if (questionsCorrect == wordsToLoad)
{
    <ul class="list-unstyled">
        <li>
            <h1 class="@dynamicClass text-success d-none d-lg-block">Congratulations Next Level..✔</h1>
            <img src="/images/Fireworks.gif" class="d-none d-lg-block" />
            <img src="/images/Fireworks.gif" width="200" class="d-lg-none" />

            <h5 class="@dynamicClass text-success d-lg-none">Congratulations Next Level..✔</h5>
        </li>
    </ul>
}
@if (LoadWordResults?.WordResults != null)
{
    Index = 0;
    @if (ShowWord == true)
    {
        @if (LoadWordResults?.WordResults != null && ShowWord == true)
        {
            <br />
            <h3 class="d-none d-lg-block">Current Word</h3>
            <h6 class="d-lg-none">Current Word</h6>
            @if (WordResult != null)
            {
                <div style="font-size:8em;color:white" class='d-none d-lg-block'>
                    @WordResult.word
                </div>
                <h1 class='d-lg-none' style="color:white">
                    @WordResult.word
                </h1>
            }
        }
        <div class="d-none d-lg-block">Select the definition that matches the word above:</div>
    }
    <div style="display:block;" class="">
       @{counter=0 ;}
       @foreach (var wordResultLoop in LoadWordResults?.WordResults?.OrderBy(x => x.RandomOrder))
        {
           counter++;
            @if (ShowWord && !string.IsNullOrWhiteSpace(wordResultLoop?.word) && wordResultLoop?.results?.Count() > 0)
            {
                var indexPosition1 = Index;
                <div style="display:inline;" class="">
                    <button  accesskey="@(counter<10 ? counter.ToString():"")" @onclick="@(() => CheckAnswerAsync(@wordResultLoop?.word, indexPosition1))" style="margin:3px"
                class="btn @ButtonClass[Index] btn-lg d-none d-lg-block">
                     <u>@(counter<10?counter.ToString():"")</u>    @wordResultLoop?.results[0].definition
                        @if (!string.IsNullOrWhiteSpace(@wordResultLoop?.results[0].partOfSpeech))
                        {
                            <text> (</text>

                            @wordResultLoop?.results[0].partOfSpeech <text>)</text>
                        }
                    </button>
                </div>
                Index = Index + 1;
                @* <a target="_blank" href="https://en.wikipedia.org/wiki/@wordResult?.word">Look Up @wordResult?.word</a> *@
            }
        }
        @if (true)
        {
            Index = 0;
         counter=0;
      }

        @foreach (var wordResultLoop in LoadWordResults.WordResults.OrderBy(x => x.RandomOrder))
        {
           counter++;
            @if (ShowWord && !string.IsNullOrWhiteSpace(wordResultLoop?.word) && wordResultLoop?.results?.Count() > 0)
            {
                var indexPosition2 = Index;
                <div class="d-flex custom-layout d-lg-none">
                    <button accesskey="@(counter<10?counter.ToString():"")" @onclick="@(() => CheckAnswerAsync(@wordResultLoop?.word,indexPosition2))" style="margin:3px"
                class="btn @ButtonClass[Index] btn-sm d-lg-none">
                        <u>@(counter<10?counter.ToString():"")</u> @wordResultLoop?.results[0].definition
                        @if (!string.IsNullOrWhiteSpace(@wordResultLoop?.results[0].partOfSpeech))
                        {
                            <text> (</text>
                            @wordResultLoop?.results[0].partOfSpeech <text>)</text>
                        }
                    </button>
                </div>
                Index = Index + 1;
            }
        }
    </div>
    @if (@Message != null)
    {
        <hr />
        <h1 class="text-danger">Unexpected Error Please load another word.</h1>
        <div class="text-danger">@Message</div>
        <h5>Json Received:</h5>
        <h6 class="text-muted">@result</h6>
    }

    @if (response != null)
    {
        @if (response.Contains("✖"))
        {
            <h1 class='text-danger'>@response</h1>
        }
        else
        {
            <h1 class='text-success'>@response</h1>
        }
    }
}
else
{
    <div style="display:normal;margin:auto;" class="">
        <div class="loader d-flex flex-column justify-content-center align-items-center">
            <h4>LOADING</h4>
        </div>
    </div>
    <hr>
    <div class="text-danger">@Message</div>
}


@if (AnswerState && PlayAudio)
{
    <PlaySound AnswerState=true Play=true />
}
else if (PlayAudio)
{
    <PlaySound AnswerState=false Play=true />
}
else
{
    <PlaySound AnswerState=false Play=false />
}
</div>