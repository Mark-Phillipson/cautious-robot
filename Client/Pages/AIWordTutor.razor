@page "/aiwordtutor"
@using BlazorApp.Client.Shared
@using BlazorApp.Client.Pages

<div class="ai-tutor-layout">
    @if (!gameStarted)
    {
        <div class="welcome-section">
            <div class="welcome-card">
                <h1>ü§ñ AI Word Tutor</h1>
                <p class="welcome-description">
                    Learn English words through interactive AI-powered conversations, stories, and personalized teaching!
                </p>
                
                <!-- API Key Section -->
                @if (!hasApiKey)
                {
                    <div class="api-key-section">
                        <OpenAIApiKeyEntry OnApiKeySaved="OnApiKeySaved" />
                        <div class="api-info">
                            <small>üí° <strong>OpenAI API Key required</strong> for AI-generated content. Your key is stored locally and never shared.</small>
                        </div>
                    </div>
                }
                
                <!-- Theme Input Section -->
                <div class="theme-section" style="margin: 1.5rem 0 2rem 0; display: flex; flex-direction: column; align-items: center;">
                    <label for="themeInput" style="font-weight: 600; font-size: 1.1rem; margin-bottom: 0.3rem; color: #444;">
    Theme <span style="color: red;">*</span> (mandatory):
</label>
<input id="themeInput" @bind="themeInput" placeholder="e.g. travel, food, sports, etc." class="theme-input"
    style="width: 260px; padding: 0.5rem 1rem; border-radius: 8px; border: 1.5px solid #bdbdbd; font-size: 1rem; margin-bottom: 0.3rem; background: #f8f9fa; color: #333; box-shadow: 0 1px 4px rgba(0,0,0,0.04); transition: border 0.2s;" />
<small style="color: #c00; font-size: 0.95rem; font-weight: 500;">Theme is required.  Please change if required.</small>
                </div>

                <div class="game-modes">
                    <h3>Choose Your Learning Adventure:</h3>
                    <div class="mode-grid">
                        <button @onclick="() => StartGame(GameMode.StoryAdventure)" class="mode-button story">
                            üìö Story Adventure
                            <small>Learn words through immersive stories</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.ConversationPractice)" class="mode-button conversation">
                            üí¨ Conversation Practice
                            <small>Practice with an AI conversation partner</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.ContextualLearning)" class="mode-button contextual">
                            üéØ Contextual Learning
                            <small>Learn words in real-world contexts</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.PersonalizedQuiz)" class="mode-button quiz">
                            üß† Smart Quiz
                            <small>AI adapts questions to your level</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.Hangman)" class="mode-button hangman">
                            üïπÔ∏è Hangman
                            <small>Guess the word, letter by letter!</small>
                        </button>
                    </div>
                </div>

                <div class="difficulty-section">
                    <h4>Difficulty Level:</h4>
                    <div class="difficulty-buttons">
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Beginner)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Beginner ? "active" : "")">
                            üå± Beginner
                        </button>
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Intermediate)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Intermediate ? "active" : "")">
                            üåø Intermediate
                        </button>
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Advanced)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Advanced ? "active" : "")">
                            üå≥ Advanced
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        ‚ö†Ô∏è @errorMessage
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="game-section">
            <div class="game-header">
                <h2>@GetGameModeTitle(currentGameMode)</h2>
                <div class="progress-info">
                    <span class="score">Score: @score</span>
                    <span class="streak">Streak: @streak</span>
                    <span class="level">Level: @GetDifficultyName(difficulty)</span>
                </div>
                <button @onclick="ExitGame" class="exit-btn">Exit Game</button>
            </div>

            <div class="game-content">
                @if (currentGameMode == GameMode.StoryAdventure)
                {
                    <div class="story-section">
                        <div class="story-content">
                            <h3>üìñ Your Story</h3>
                            <p class="story-text">@currentContent</p>
                        </div>
                        @RenderCurrentChallenge()
                    </div>
                }
                else if (isLoading)
                {
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p>ü§ñ AI is thinking...</p>
                    </div>
                }
                else if (currentGameMode == GameMode.ConversationPractice)
                {
                    <div class="conversation-section">
                            <!-- Target Words Display -->
                            @if (conversationTargetWords.Count > 0)
                            {
                                <div class="target-words-panel">
                                    <h4>üéØ Try to use these words naturally in conversation:</h4>
                                    <div class="target-words-grid">
                                        @foreach (var word in conversationTargetWords)
                                        {
                                            <span class="target-word @(usedTargetWords.Contains(word) ? "used" : "")">
                                                @word
                                                @if (usedTargetWords.Contains(word))
                                                {
                                                    <span class="checkmark">‚úì</span>
                                                }
                                            </span>
                                        }
                                    </div>
                                    <small class="words-progress">Words used correctly: @wordsUsedCorrectly / @conversationTargetWords.Count</small>
                                </div>
                            }
                            
                            <div class="chat-history" @ref="chatHistoryContainer">
                                @foreach (var (message, index) in conversationHistory.Select((msg, i) => (msg, i)))
                                {
                                    <div class="chat-message @(index % 2 == 0 ? "ai" : "user")">
                                        @message
                                    </div>
                                }
                            </div>                            <div class="chat-input-section">
                                <input type="text" @bind="userInput" @onkeydown="HandleKeyPress" @ref="chatInputElement"
                                       placeholder="Type your response..." class="chat-input" />
                                <button @onclick="SendMessage" class="send-btn">Send</button>
                            </div>
                        </div>
                    }
                    else if (currentGameMode == GameMode.ContextualLearning)
                    {
                        <div class="contextual-section">
                            <h3>üéØ Real-World Practice</h3>
                            @RenderCurrentChallenge()
                        </div>
                    }
                    else if (currentGameMode == GameMode.PersonalizedQuiz)
                    {
                        <div class="quiz-section">
                            <h3>üß† Smart Quiz</h3>
                            @RenderCurrentChallenge()
                        </div>
                    }
                    else if (currentGameMode == GameMode.Hangman)
                    {
                        <div class="hangman-section">
                            <h3>üïπÔ∏è Hangman</h3>
                            <HangmanFigure WrongCount="@hangmanWrongGuesses" MaxWrong="@hangmanMaxWrong" />
                            <p>Theme: @themeInput</p>
                            <p>Word: @GetHangmanDisplay()</p>
                            <p>Wrong guesses: @hangmanWrongGuesses / @hangmanMaxWrong</p>
                            <p>Guessed letters: @string.Join(", ", hangmanGuesses.OrderBy(c => c))</p>
                            <p><strong>Hint:</strong> @(string.IsNullOrWhiteSpace(hangmanDefinition) ? "No hint available." : hangmanDefinition)</p>
                            @if (hangmanGameOver)
                            {
                                <BlazorApp.Client.Pages.PlaySound Play="true" AnswerState="@hangmanWin" />
                                <p class="@(hangmanWin ? "hangman-win" : "hangman-lose")">
                                    @(hangmanWin ? "üéâ You won!" : $"Game over! The word was '{hangmanWord}'.")
                                </p>
                                <button @onclick="() => StartGame(GameMode.Hangman)" class="restart-btn" style="margin-top: 1.2rem; padding: 0.7rem 1.6rem; font-size: 1.1rem; border-radius: 8px; background: linear-gradient(90deg, #6a82fb 0%, #fc5c7d 100%); color: #fff; border: none; font-weight: 600; box-shadow: 0 2px 8px rgba(0,0,0,0.07); transition: background 0.2s;">Play Again</button>
                            }
                            else
                            {
                                <HangmanInput OnGuess="ProcessHangmanGuess"
                                              Disabled="@(hangmanGameOver)"
                                              GuessedLetters="@(HangmanGuessedLettersUpper)" />
                            }
                        </div>
                    }
                }
            </div>            @if (showFeedback && !string.IsNullOrEmpty(feedbackMessage))
            {
                <div class="feedback-section @(lastAnswerCorrect ? "correct" : "incorrect")">
                    <div class="feedback-content">                        <div class="feedback-header">
                            <h4>@(lastAnswerCorrect ? "üéâ Excellent!" : "ü§î Not quite...")</h4>
                            <div class="countdown-display">
                                <span class="countdown-text">@countdownSeconds</span>
                            </div>
                        </div>
                          <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(ProgressPercentage.ToString("F1", System.Globalization.CultureInfo.InvariantCulture))%"></div>
                            </div>
                        </div>
                        
                        <p class="feedback-message">@feedbackMessage</p>
                        @if (!lastAnswerCorrect && !string.IsNullOrEmpty(correctAnswer))
                        {
                            <p><strong>Correct answer:</strong> @correctAnswer</p>
                        }
                        <button @onclick="ContinueLearning" class="continue-btn" @ref="continueBtnRef">Continue Learning</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@{
    RenderFragment RenderCurrentChallenge() => builder =>
    {
        if (currentChallengeIndex >= currentChallenges.Count) 
        {
            builder.AddMarkupContent(0, "<p>Loading next challenge...</p>");
            return;
        }

        var challenge = currentChallenges[currentChallengeIndex];
          if (challenge.IsOpenEnded)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "challenge-section");
            
            builder.OpenElement(2, "h4");
            builder.AddAttribute(3, "class", "challenge-question");
            builder.AddAttribute(4, "style", "color: #111;");
            builder.AddContent(5, challenge.Question);
            builder.CloseElement();
            
            // Add a container for the text input and button
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "text-input-container");
              builder.OpenElement(6, "textarea");
            builder.AddAttribute(7, "class", "answer-textarea");
            builder.AddAttribute(8, "placeholder", "Write your answer here...");
            builder.AddAttribute(9, "value", userInput);
            builder.AddAttribute(10, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, (e) => userInput = e.Value?.ToString() ?? ""));
            builder.AddAttribute(11, "onkeydown", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, HandleKeyPressForTextarea));
            builder.AddElementReferenceCapture(12, r => answerTextAreaRef = r);
            builder.CloseElement();
            // Spinner overlay for answer processing
            if (isLoading)
            {
                builder.OpenElement(100, "div");
                builder.AddAttribute(101, "class", "answer-spinner-overlay");
                builder.OpenElement(102, "div");
                builder.AddAttribute(103, "class", "loading-spinner");
                builder.CloseElement();
                builder.CloseElement();
            }
            builder.OpenElement(13, "button");
            builder.AddAttribute(14, "class", "submit-btn");
            builder.AddAttribute(15, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => ProcessAnswer(userInput)));
            builder.AddAttribute(15, "disabled", isLoading);
            builder.AddContent(16, "Submit Answer");
            builder.CloseElement();
            
            builder.CloseElement(); // Close text-input-container
            builder.CloseElement(); // Close challenge-section
        }
        else
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "challenge-section");
            builder.OpenElement(2, "h4");
            builder.AddAttribute(3, "class", "challenge-question");
            builder.AddAttribute(4, "style", "color: #111;");
            builder.AddContent(5, challenge.Question);
            builder.CloseElement();
              builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "options-grid");
            builder.AddAttribute(6, "style", 
                "display: grid; " +
                "grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); " +
                "gap: 15px; " +
                "margin-top: 1.5rem; " +
                "margin-bottom: 1rem;");
              if (challenge.Options != null)
            {
                var optionIndex = 7; // Start from 7 since we added style attribute
                foreach (var option in challenge.Options)
                {
                    builder.OpenElement(optionIndex++, "button");
                    builder.AddAttribute(optionIndex++, "class", "option-btn");
                    builder.AddAttribute(optionIndex++, "style", 
                        "background: linear-gradient(135deg, #f8f9fa, #ffffff); " +
                        "border: 2px solid #dee2e6; " +
                        "border-radius: 15px; " +
                        "padding: 18px 20px; " +
                        "cursor: pointer; " +
                        "transition: all 0.3s ease; " +
                        "text-align: center; " +
                        "font-size: 1.1rem; " +
                        "font-weight: 500; " +
                        "color: #495057; " +
                        "box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); " +
                        "font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; " +
                        "min-height: 60px; " +
                        "width: 100%; " +
                        "display: flex; " +                        "align-items: center; " +
                        "justify-content: center;");
                    builder.AddAttribute(optionIndex++, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => ProcessAnswer(option)));
                    builder.AddContent(optionIndex++, option);
                    builder.CloseElement();
                }
                
                builder.CloseElement(); // Close options-grid
            }
            
            builder.CloseElement(); // Close challenge-section
        }
    };
}

@if (PlayAudio && lastAnswerCorrect)
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="true" Play="true" />
}
else if (PlayAudio)
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="false" Play="true" />
}
else
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="false" Play="false" />
}

<!-- Disclaimer about AI accuracy -->
<div class="disclaimer">
    ‚ö†Ô∏è Disclaimer: AI-generated content may contain inaccuracies. Please verify information independently.
</div>

@code {
    private HashSet<char> HangmanGuessedLettersUpper => new HashSet<char>(hangmanGuesses.Select(c => char.ToUpperInvariant(c)));
    
    protected override void OnInitialized()
    {
        // Randomly choose a theme as the page loads (not when a game starts)
        if (string.IsNullOrWhiteSpace(themeInput))
        {
            var themes = new[] { "nature", "travel", "food", "technology", "sports", "music", "friendship", "adventure", "school", "weather", "animals", "science", "art", "history", "health" };
            var random = new Random();
            themeInput = themes[random.Next(themes.Length)];
        }
    }
}
