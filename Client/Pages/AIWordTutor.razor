@page "/aiwordtutor"
@using BlazorApp.Client.Shared
@using BlazorApp.Client.Pages
<PageTitle>AI Word Tutor</PageTitle>
<div class="ai-tutor-layout">
    @if (!gameStarted)
    {
        <div class="welcome-section">
            <div class="welcome-card">
                <h1>ü§ñ AI Word Tutor</h1>
                <p class="welcome-description">
                    Learn English words through interactive AI-powered conversations, stories, and personalized teaching!
                </p>
                
                <!-- API Key Section -->
                @if (!hasApiKey)
                {
                    <div class="api-key-section">
                        <OpenAIApiKeyEntry OnApiKeySaved="OnApiKeySaved" />
                        <div class="api-info">
                            <small>üí° <strong>OpenAI API Key required</strong> for AI-generated content. Your key is stored locally and never shared.</small>
                        </div>
                    </div>
                }
                
                <!-- Theme Input Section -->
                <div class="theme-section" style="margin: 1.5rem 0 2rem 0; display: flex; flex-direction: column; align-items: center;">
                    <label for="themeInput" style="font-weight: 600; font-size: 1.1rem; margin-bottom: 0.3rem; color: #444;">
                        Theme <span style="color: red;">*</span> (mandatory):
                    </label>
                    <input id="themeInput" @bind="themeInput" placeholder="e.g. travel, food, sports, etc." class="theme-input"
                        style="width: 260px; padding: 0.5rem 1rem; border-radius: 8px; border: 1.5px solid #bdbdbd; font-size: 1rem; margin-bottom: 0.3rem; background: #f8f9fa; color: #333; box-shadow: 0 1px 4px rgba(0,0,0,0.04); transition: border 0.2s;" />
                    <small style="color: #c00; font-size: 0.95rem; font-weight: 500;">Theme is required.  Please change if required.</small>
                </div>

                <div class="game-modes">
                    <h3>Choose Your Learning Adventure:</h3>
                    <div class="mode-grid">
                        <button @onclick="() => StartGame(GameMode.StoryAdventure)" class="mode-button story">
                            üìö Story Adventure
                            <small>Learn words through immersive stories</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.ConversationPractice)" class="mode-button conversation">
                            üí¨ Conversation Practice
                            <small>Practice with an AI conversation partner</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.ContextualLearning)" class="mode-button contextual">
                            üéØ Contextual Learning
                            <small>Learn words in real-world contexts</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.PersonalizedQuiz)" class="mode-button quiz">
                            üß† Smart Quiz
                            <small>AI adapts questions to your level</small>
                        </button>
                        <button @onclick="() => StartGame(GameMode.Hangman)" class="mode-button hangman">
                            üïπÔ∏è Hangman
                            <small>Guess the word, letter by letter!</small>
                        </button>
                    </div>
                </div>

                <div class="difficulty-section">
                    <h4>Difficulty Level:</h4>
                    <div class="difficulty-buttons">
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Beginner)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Beginner ? "active" : "")">
                            üå± Beginner
                        </button>
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Intermediate)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Intermediate ? "active" : "")">
                            üåø Intermediate
                        </button>
                        <button @onclick="() => SetDifficulty(DifficultyLevel.Advanced)" 
                                class="difficulty-btn @(difficulty == DifficultyLevel.Advanced ? "active" : "")">
                            üå≥ Advanced
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        ‚ö†Ô∏è @errorMessage
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="game-section">
            <div class="game-header">
                <h2>@GetGameModeTitle(currentGameMode)</h2>
                <div class="progress-info">
                    <span class="score">Score: @score</span>
                    <span class="streak">Streak: @streak</span>
                    <span class="level">Level: @GetDifficultyName(difficulty)</span>
                </div>
                <button @onclick="ExitGame" class="exit-btn">Exit Game</button>
            </div>

            <div class="game-content">
                @if (currentGameMode == GameMode.StoryAdventure)
                {
                    <div class="story-section">
                        <div class="story-content">
                            <h3>üìñ Your Story</h3>
                            <p class="story-text">@currentContent</p>
                        </div>
                        @RenderCurrentChallenge
                    </div>
                }
                else if (isLoading)
                {
                    <div class="loading-section">
                        <div class="loading-spinner"></div>
                        <p>ü§ñ AI is thinking...</p>
                    </div>
                }
                else if (currentGameMode == GameMode.ConversationPractice)
                {
                    <div class="conversation-section">
                            <!-- Target Words Display -->
                            @if (conversationTargetWords.Count > 0)
                            {
                                <div class="target-words-panel">
                                    <h4>üéØ Try to use these words naturally in conversation:</h4>
                                    <div class="target-words-grid">
                                        @foreach (var word in conversationTargetWords)
                                        {
                                            <span class="target-word @(usedTargetWords.Contains(word) ? "used" : "")">
                                                @word
                                                @if (usedTargetWords.Contains(word))
                                                {
                                                    <span class="checkmark">‚úì</span>
                                                }
                                            </span>
                                        }
                                    </div>
                                    <small class="words-progress">Words used correctly: @wordsUsedCorrectly / @conversationTargetWords.Count</small>
                                </div>
                            }
                            
                            <div class="chat-history" @ref="chatHistoryContainer">
                                @foreach (var (message, index) in conversationHistory.Select((msg, i) => (msg, i)))
                                {
                                    <div class="chat-message @(index % 2 == 0 ? "ai" : "user")">
                                        @message
                                    </div>
                                }
                            </div>                            
                            <div class="chat-input-section">
                                <input type="text" @bind="userInput" @onkeydown="HandleKeyPress" @ref="chatInputElement"
                                       placeholder="Type your response..." class="chat-input" />
                                <button @onclick="SendMessage" class="send-btn">Send</button>
                            </div>
                        </div>
                    }
                    else if (currentGameMode == GameMode.ContextualLearning)
                    {
                        <div class="contextual-section">
                            <h3>üéØ Real-World Practice</h3>
                            @RenderCurrentChallenge
                        </div>
                    }
                    else if (currentGameMode == GameMode.PersonalizedQuiz)
                    {
                        <div class="quiz-section">
                            <h3>üß† Smart Quiz</h3>
                            @RenderCurrentChallenge
                        </div>
                    }
                    else if (currentGameMode == GameMode.Hangman)
                    {
                        <div class="hangman-section">
                            <h3>üïπÔ∏è Hangman</h3>
                            <HangmanFigure WrongCount="@hangmanWrongGuesses" MaxWrong="@hangmanMaxWrong" />
                            
                            <div class="hangman-info">
                                <div class="hangman-card theme-display">
                                    <h4>Theme</h4>
                                    <p>@themeInput</p>
                                </div>
                                <div class="hangman-card wrong-counter @(hangmanWrongGuesses >= hangmanMaxWrong - 1 ? "danger" : "")">
                                    <h4>Wrong Guesses</h4>
                                    <p>@hangmanWrongGuesses / @hangmanMaxWrong</p>
                                </div>
                            </div>
                            
                            <div class="hangman-word-display">@GetHangmanDisplay()</div>
                            
                            @if (!string.IsNullOrWhiteSpace(hangmanDefinition))
                            {
                                <div class="hangman-hint">
                                    <strong>üí° Hint:</strong> @hangmanDefinition
                                </div>
                            }
                            
                            @if (hangmanGuesses.Count > 0)
                            {
                                <div class="guessed-letters">
                                    <strong>üî§ Guessed Letters:</strong>
                                    <div class="guessed-letters-list">@string.Join(" ", hangmanGuesses.OrderBy(c => c))</div>
                                </div>
                            }
                            
                            @if (hangmanGameOver)
                            {
                                <BlazorApp.Client.Pages.PlaySound Play="true" AnswerState="@hangmanWin" />
                                <div class="hangman-result @(hangmanWin ? "hangman-win" : "hangman-lose")">
                                    @(hangmanWin ? "üéâ Congratulations! You won!" : $"üíÄ Game Over! The word was '{hangmanWord}'")
                                </div>
                                <button @onclick="() => StartGame(GameMode.Hangman)" class="restart-btn">
                                    üéÆ Play Again
                                </button>
                            }
                            else
                            {
                                <HangmanInput OnGuess="ProcessHangmanGuess"
                                              Disabled="@(hangmanGameOver)"
                                              GuessedLetters="@(HangmanGuessedLettersUpper)" />
                            }
                        </div>
                    }
            </div>            
            @if (showFeedback && !string.IsNullOrEmpty(feedbackMessage))
            {
                <div class="feedback-section @(lastAnswerCorrect ? "correct" : "incorrect")">
                    <div class="feedback-content">                        
                        <div class="feedback-header">
                            <h4>@(lastAnswerCorrect ? "üéâ Excellent!" : "ü§î Not quite...")</h4>
                            <div class="countdown-display">
                                <span class="countdown-text">@countdownSeconds</span>
                            </div>
                        </div>
                          <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(ProgressPercentage.ToString("F1", System.Globalization.CultureInfo.InvariantCulture))%">
                                </div>
                            </div>
                        </div>
                        
                        <p class="feedback-message">@feedbackMessage</p>
                        @if (!lastAnswerCorrect && !string.IsNullOrEmpty(correctAnswer))
                        {
                            <p><strong>Correct answer:</strong> @correctAnswer</p>
                        }
                        <button @onclick="ContinueLearning" class="continue-btn" @ref="continueBtnRef">Continue Learning</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (PlayAudio && lastAnswerCorrect)
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="true" Play="true" />
}
else if (PlayAudio)
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="false" Play="true" />
}
else
{
    <BlazorApp.Client.Pages.PlaySound AnswerState="false" Play="false" />
}

<!-- Disclaimer about AI accuracy -->
<div class="disclaimer">
    ‚ö†Ô∏è Disclaimer: AI-generated content may contain inaccuracies. Please verify information independently.
</div>
