@using BlazorApp.Client.Models
@using BlazorApp.Client.Pages
@implements IDisposable

<div class="word-type-snap-container">
    <div class="snap-game-header">
        <h3>üéØ Word Type Snap</h3>
    </div>

    <div class="snap-instructions">
        <p>üí° Click <strong>Snap!</strong> when both words are the same type (e.g., both nouns or both verbs)</p>
        @if (DifficultyLevel == DifficultyLevel.Beginner)
        {
            <p><small>üéì <strong>Beginner Mode:</strong> Word types and example sentences are shown to help you learn!</small></p>
        }
        else if (DifficultyLevel == DifficultyLevel.Intermediate)
        {
            <p><small>üìö <strong>Intermediate Mode:</strong> Word type icons and labels are shown to guide you.</small></p>
        }
        else
        {
            <p><small>üèÜ <strong>Advanced Mode:</strong> Only word type icons are shown - use your knowledge!</small></p>
        }
    </div>

    <div class="words-display">
        <div class="word-card @GetWordCardClass(currentWords[0])">
            <div class="word-text @GetWordSizeClass(currentWords[0].Text)">@currentWords[0].Text</div>
            @if (DifficultyLevel == DifficultyLevel.Beginner || DifficultyLevel == DifficultyLevel.Intermediate)
            {
                <div class="word-type-info">
                    <span class="word-type-emoji">@currentWords[0].Type.GetEmoji()</span>
                    @if (DifficultyLevel == DifficultyLevel.Beginner || DifficultyLevel == DifficultyLevel.Intermediate)
                    {
                        <span class="word-type-label">@currentWords[0].Type.GetDisplayName()</span>
                    }
                </div>
            }
            else
            {
                <div class="word-type-info">
                    <span class="word-type-emoji">@currentWords[0].Type.GetEmoji()</span>
                </div>
            }
            @if (DifficultyLevel == DifficultyLevel.Beginner && !string.IsNullOrEmpty(currentWords[0].ExampleSentence))
            {
                <div class="example-sentence">
                    <em>"@currentWords[0].ExampleSentence"</em>
                </div>
            }
        </div>

        <div class="snap-button-container">
            <button @onclick="SnapAttempt" class="snap-button @(isProcessing ? "processing" : "")" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="processing-text">‚è≥</span>
                }
                else
                {
                    <span class="snap-text">‚ö° SNAP!</span>
                }
            </button>
        </div>

        <div class="word-card @GetWordCardClass(currentWords[1])">
            <div class="word-text @GetWordSizeClass(currentWords[1].Text)">@currentWords[1].Text</div>
            @if (DifficultyLevel == DifficultyLevel.Beginner || DifficultyLevel == DifficultyLevel.Intermediate)
            {
                <div class="word-type-info">
                    <span class="word-type-emoji">@currentWords[1].Type.GetEmoji()</span>
                    @if (DifficultyLevel == DifficultyLevel.Beginner || DifficultyLevel == DifficultyLevel.Intermediate)
                    {
                        <span class="word-type-label">@currentWords[1].Type.GetDisplayName()</span>
                    }
                </div>
            }
            else
            {
                <div class="word-type-info">
                    <span class="word-type-emoji">@currentWords[1].Type.GetEmoji()</span>
                </div>
            }
            @if (DifficultyLevel == DifficultyLevel.Beginner && !string.IsNullOrEmpty(currentWords[1].ExampleSentence))
            {
                <div class="example-sentence">
                    <em>"@currentWords[1].ExampleSentence"</em>
                </div>
            }
        </div>
    </div>

    @if (showResult)
    {
        <div class="snap-result @(lastSnapCorrect ? "correct" : "incorrect")">
            <div class="result-header">
                @if (lastSnapCorrect)
                {
                    <span class="result-icon">üéâ</span>
                    <span class="result-text">Perfect Match!</span>
                }
                else
                {
                    <span class="result-icon">‚ùå</span>
                    <span class="result-text">Not a match!</span>
                }
            </div>
            <div class="result-explanation">
                @if (lastSnapCorrect)
                {
                    <p>Both words are <strong>@currentWords[0].Type.GetDisplayName()s</strong>! +@pointsEarned points</p>
                }
                else
                {
                    <p>
                        <strong>@currentWords[0].Text</strong> is a @currentWords[0].Type.GetDisplayName() @currentWords[0].Type.GetEmoji(),
                        but <strong>@currentWords[1].Text</strong> is a @currentWords[1].Type.GetDisplayName() @currentWords[1].Type.GetEmoji()
                    </p>
                }
            </div>
        </div>
    }

    @if (showNewGameButton)
    {
        <div class="new-game-section">
            <button @onclick="StartNewGame" class="new-game-button">
                üéÆ New Game
            </button>
        </div>
    }
</div>

@* Play sound for snap results *@
<BlazorApp.Client.Pages.PlaySound Play="@PlayAudio" AnswerState="@lastSnapCorrect" />

@code {
    [Parameter] public EventCallback<int> OnScoreChanged { get; set; }
    [Parameter] public EventCallback<int> OnStreakChanged { get; set; }
    [Parameter] public bool PlayAudio { get; set; } = true;
    [Parameter] public DifficultyLevel DifficultyLevel { get; set; } = DifficultyLevel.Intermediate;

    private List<Word> wordBank = new();
    private Word[] currentWords = new Word[2];
    private Random random = new();
    
    private int mainGameScore = 0; // Track the main game score to update parent
    private int Streak = 0;
    private bool showResult = false;
    private bool lastSnapCorrect = false;
    private bool isProcessing = false;
    private bool showNewGameButton = false;
    private int pointsEarned = 0;

    // Auto-change timer variables
    private System.Threading.Timer? autoChangeTimer;
    private const int AUTO_CHANGE_DELAY_MS = 5000; // 5 seconds

    protected override void OnInitialized()
    {
        InitializeWordBank();
        LoadNewWords();
    }

    public void Dispose()
    {
        autoChangeTimer?.Dispose();
    }

    private void InitializeWordBank()
    {
        wordBank = new List<Word>
        {
            // Nouns
            new("Cat", WordType.Noun, "The cat sat on the windowsill."),
            new("House", WordType.Noun, "Our house has a beautiful garden."),
            new("Tree", WordType.Noun, "The old tree provides plenty of shade."),
            new("Book", WordType.Noun, "I'm reading an exciting book about adventure."),
            new("Ocean", WordType.Noun, "The ocean waves crashed against the shore."),
            new("Mountain", WordType.Noun, "We climbed the mountain at sunrise."),
            new("Star", WordType.Noun, "The star shone brightly in the night sky."),
            new("Friend", WordType.Noun, "My best friend always makes me laugh."),
            new("Dream", WordType.Noun, "She had a wonderful dream about flying."),
            new("Music", WordType.Noun, "The music filled the room with joy."),
            new("Flower", WordType.Noun, "The flower bloomed beautifully in spring."),
            new("Journey", WordType.Noun, "Our journey took us across three countries."),

            // Verbs
            new("Run", WordType.Verb, "I like to run in the park every morning."),
            new("Jump", WordType.Verb, "The children jump on the trampoline."),
            new("Sing", WordType.Verb, "She loves to sing in the choir."),
            new("Dance", WordType.Verb, "They dance together at the party."),
            new("Think", WordType.Verb, "I think this puzzle is challenging."),
            new("Create", WordType.Verb, "Artists create beautiful works of art."),
            new("Explore", WordType.Verb, "We explore new places every summer."),
            new("Laugh", WordType.Verb, "The joke made everyone laugh loudly."),
            new("Discover", WordType.Verb, "Scientists discover new things every day."),
            new("Build", WordType.Verb, "They build houses for families in need."),
            new("Celebrate", WordType.Verb, "We celebrate birthdays with cake and gifts."),
            new("Transform", WordType.Verb, "Caterpillars transform into butterflies."),

            // Adjectives
            new("Beautiful", WordType.Adjective, "The sunset was absolutely beautiful."),
            new("Happy", WordType.Adjective, "The children were happy to see their grandparents."),
            new("Brave", WordType.Adjective, "The brave firefighter rescued the cat."),
            new("Mysterious", WordType.Adjective, "The mysterious package arrived at midnight."),
            new("Colorful", WordType.Adjective, "The garden was filled with colorful flowers."),
            new("Peaceful", WordType.Adjective, "The peaceful lake reflected the mountains."),
            new("Amazing", WordType.Adjective, "The magician performed an amazing trick."),
            new("Gentle", WordType.Adjective, "The gentle breeze cooled the warm afternoon."),
            new("Brilliant", WordType.Adjective, "Her brilliant idea solved the problem."),
            new("Magical", WordType.Adjective, "The fairy tale had a magical ending."),
            new("Serene", WordType.Adjective, "The serene monastery offered quiet meditation."),
            new("Vibrant", WordType.Adjective, "The vibrant colors made the painting come alive."),

            // Adverbs
            new("Quickly", WordType.Adverb, "She quickly finished her homework."),
            new("Carefully", WordType.Adverb, "He carefully carried the fragile vase."),
            new("Silently", WordType.Adverb, "The cat moved silently through the grass."),
            new("Gracefully", WordType.Adverb, "The dancer moved gracefully across the stage."),
            new("Boldly", WordType.Adverb, "She boldly stood up for what was right."),
            new("Gently", WordType.Adverb, "The mother gently rocked her baby to sleep."),
            new("Eagerly", WordType.Adverb, "The students eagerly awaited their test results."),
            new("Wisely", WordType.Adverb, "The elder wisely shared his knowledge."),
            new("Joyfully", WordType.Adverb, "The children joyfully played in the snow."),
            new("Confidently", WordType.Adverb, "She confidently presented her project."),
            new("Smoothly", WordType.Adverb, "The car ran smoothly after the repair."),
            new("Perfectly", WordType.Adverb, "The recipe turned out perfectly delicious."),

            // Prepositions
            new("Under", WordType.Preposition, "The treasure was hidden under the old oak tree."),
            new("Above", WordType.Preposition, "The bird flew above the clouds."),
            new("Between", WordType.Preposition, "The secret passage was between two bookcases."),
            new("Through", WordType.Preposition, "We walked through the enchanted forest."),
            new("Around", WordType.Preposition, "The children ran around the playground."),
            new("Beyond", WordType.Preposition, "The adventure lies beyond the mountain range."),
            new("Within", WordType.Preposition, "The answer was within reach all along."),
            new("Across", WordType.Preposition, "The bridge stretched across the wide river."),

            // Pronouns
            new("They", WordType.Pronoun, "They went to the store together."),
            new("We", WordType.Pronoun, "We enjoyed the concert last night."),
            new("You", WordType.Pronoun, "You are invited to the birthday party."),
            new("She", WordType.Pronoun, "She painted a beautiful landscape."),
            new("He", WordType.Pronoun, "He scored the winning goal."),
            new("It", WordType.Pronoun, "It was the best day ever."),
            new("Them", WordType.Pronoun, "I gave the books to them."),
            new("Us", WordType.Pronoun, "The teacher taught us about science."),

            // Conjunctions
            new("And", WordType.Conjunction, "I like apples and oranges."),
            new("But", WordType.Conjunction, "It was raining, but we went outside anyway."),
            new("Or", WordType.Conjunction, "Would you like tea or coffee?"),
            new("So", WordType.Conjunction, "I was tired, so I went to bed early."),
            new("Because", WordType.Conjunction, "We stayed inside because it was storming."),
            new("Although", WordType.Conjunction, "Although it was late, we continued working."),
            new("While", WordType.Conjunction, "She read a book while waiting for the bus."),
            new("Since", WordType.Conjunction, "Since you're here, let's start the meeting."),

            // Interjections
            new("Wow", WordType.Interjection, "Wow! That fireworks display was incredible!"),
            new("Hey", WordType.Interjection, "Hey! Wait for me!"),
            new("Oops", WordType.Interjection, "Oops! I accidentally dropped my phone."),
            new("Hooray", WordType.Interjection, "Hooray! We won the championship!"),
            new("Ouch", WordType.Interjection, "Ouch! I stubbed my toe on the table."),
            new("Bravo", WordType.Interjection, "Bravo! That was an outstanding performance!"),
            new("Alas", WordType.Interjection, "Alas! The beautiful garden was destroyed by the storm."),
            new("Yay", WordType.Interjection, "Yay! It's finally time for vacation!")
        };
    }

    private void LoadNewWords()
    {
        var shuffled = wordBank.OrderBy(x => random.Next()).ToList();
        currentWords[0] = shuffled[0];
        currentWords[1] = shuffled[1];
        showResult = false;
        isProcessing = false;
        
        // Start auto-change timer
        StartAutoChangeTimer();
    }

    private void StartAutoChangeTimer()
    {
        // Dispose existing timer if any
        autoChangeTimer?.Dispose();
        
        // Only start timer if words don't match (no snap needed)
        if (currentWords[0].Type != currentWords[1].Type)
        {
            autoChangeTimer = new System.Threading.Timer(async _ =>
            {
                // Auto-change words after delay
                await InvokeAsync(() =>
                {
                    if (!showResult && !isProcessing) // Only if user hasn't interacted
                    {
                        LoadNewWords();
                        StateHasChanged();
                    }
                });
            }, null, AUTO_CHANGE_DELAY_MS, Timeout.Infinite);
        }
    }

    private void StopAutoChangeTimer()
    {
        autoChangeTimer?.Dispose();
        autoChangeTimer = null;
    }

    private async Task SnapAttempt()
    {
        if (isProcessing) return;

        // Stop auto-change timer since user is interacting
        StopAutoChangeTimer();

        isProcessing = true;
        StateHasChanged();

        await Task.Delay(300); // Brief pause for effect

        bool isMatch = currentWords[0].Type == currentWords[1].Type;
        lastSnapCorrect = isMatch;

        if (isMatch)
        {
            // Correct match
            pointsEarned = Math.Max(10, 10 + (Streak * 2)); // Base 10 points, bonus for streak
            mainGameScore += pointsEarned;
            Streak++;
        }
        else
        {
            // Incorrect match
            pointsEarned = 0;
            mainGameScore = Math.Max(0, mainGameScore - 5); // Lose 5 points, but don't go below 0
            Streak = 0; // Reset streak
        }

        showResult = true;
        StateHasChanged();

        // Notify parent component of score and streak changes
        await OnScoreChanged.InvokeAsync(mainGameScore);
        await OnStreakChanged.InvokeAsync(Streak);

        // Auto-continue after showing result
        await Task.Delay(2500);
        LoadNewWords();
        StateHasChanged();
    }

    private async Task StartNewGame()
    {
        StopAutoChangeTimer(); // Clean up any existing timer
        mainGameScore = 0;
        Streak = 0;
        showResult = false;
        showNewGameButton = false;
        LoadNewWords();
        
        // Notify parent component of score and streak reset
        await OnScoreChanged.InvokeAsync(mainGameScore);
        await OnStreakChanged.InvokeAsync(Streak);
    }

    private string GetWordCardClass(Word word)
    {
        return word.Type switch
        {
            WordType.Noun => "noun",
            WordType.Verb => "verb",
            WordType.Adjective => "adjective",
            WordType.Adverb => "adverb",
            WordType.Preposition => "preposition",
            WordType.Pronoun => "pronoun",
            WordType.Conjunction => "conjunction",
            WordType.Interjection => "interjection",
            _ => "default"
        };
    }

    private string GetWordSizeClass(string wordText)
    {
        return wordText.Length switch
        {
            <= 4 => "word-size-small",
            <= 8 => "word-size-medium",
            <= 12 => "word-size-large",
            _ => "word-size-extra-large"
        };
    }
}
