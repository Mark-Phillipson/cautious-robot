@page "/scrabblegame"

<div class="scrabble-layout">
    <div class="game-section">
        <div class="score-display">
            <h3>Current Score: @currentScore</h3>
            <h4>Last Word Score: @lastWordScore</h4>
        </div>
        <main class="scrabble-board" tabindex="0" aria-label="Scrabble Board" role="region">
            <table class="board-table" aria-label="Scrabble Board Preview">
                <tr>
                    @for (int col = 0; col < 15; col++)
                    {
                        var currentCol = col;
                        <td class="board-cell @(currentCol == 7 ? "center-cell" : "")" 
                            @onclick="() => OnCellClick(currentCol)">
                            @GetBoardCell(currentCol)
                        </td>
                    }
                </tr>
            </table>

            <div class="tile-rack" aria-label="Your Tiles">
                <span>Tiles:</span>
                @{
                    for (int i = 0; i < tileRack.Count; i++)
                    {
                        var index = i;
                        var tile = tileRack[i];
                        <button class="tile-btn @(selectedTileIndices.Contains(index) ? "selected" : "")"
                                @key="@($"tile_{index}_{tile}")"
                                @onclick="@(e => SelectTile(index))"
                                @onclick:preventDefault="true"
                                @onclick:stopPropagation="true"
                                type="button">
                            @tile
                            <span class="letter-score">@letterScores[tile]</span>
                        </button>
                    }
                }
            </div>

            <div class="selected-word" aria-label="Selected Word">
                <div class="selected-word-label">Word you are building:</div>
                <div class="selected-word-value" role="group" aria-label="Selected letters">
                    @if (!HasSelectedLetters)
                    {
                        <span class="placeholder">(Click tiles and center letter to build a word)</span>
                    }
                    else
                    {
                        @foreach (var (letter, isCenter) in GetSelectedWord())
                        {
                            <button type="button" 
                                    class="built-word-tile @(isCenter ? "center-letter" : "")"
                                    @onclick="() => RemoveLetter(letter, isCenter)">
                                @letter
                            </button>
                        }
                    }
                </div>
            </div>

            <nav class="scrabble-controls" aria-label="Game Controls">
                <button @onclick="ShuffleTiles" type="button">Shuffle Tiles</button>
                <button @onclick="PlayWord" type="button">Play Word</button>
                <button @onclick="ClearSelection" type="button">Clear Selection</button>
                <button @onclick="StartNewGame" type="button">New Game</button>
            </nav>
        </main>
    </div>
    
    <section class="instructions-section" aria-label="How to Play">
        <h2>How to Play Scrabble Practice Game</h2>
        <div class="instructions-content">
            <ol>
                <li>Practice making Scrabble words using the center letter on the board (highlighted in gold).</li>
                <li>Your tile rack shows 7 letters. Each tile displays its Scrabble point value in the corner.</li>
                <li>Click the center letter and your own tiles to create a word (up to 7 letters total).</li>
                <li>The center letter can be used at any position in your word.</li>
                <li>Controls:
                    <ul>
                        <li><b>Play Word</b> (Alt+W) - Place your word if it uses the center letter</li>
                        <li><b>Shuffle Tiles</b> (Alt+S) - Get new random letters</li>
                        <li><b>Clear Selection</b> (Alt+C) - Reset your word</li>
                        <li><b>New Game</b> (Alt+N) - Start a fresh game</li>
                    </ul>
                </li>
                <li>After placing a word:
                    <ul>
                        <li>Points are added to your score</li>
                        <li>Used tiles are replaced automatically</li>
                        <li>The word stays on the board</li>
                    </ul>
                </li>
            </ol>
        </div>
    </section>
</div>

@code {    private List<char> tileRack = new();
    private List<int> selectedTileIndices = new();
    private char[] board = new char[15];
    private bool centerLetterSelected;
    private int? centerLetterPosition;
    private readonly Random rng = new();
    private int currentScore;
    private int lastWordScore;
    private bool isProcessingClick = false;  // Add lock for click processing

    protected override void OnInitialized()
    {
        StartNewGame();
    }    private void SelectTile(int index)
    {
        Console.WriteLine($"SelectTile called with index: {index}");
        Console.WriteLine($"Current tile rack: [{string.Join(", ", tileRack)}]");
        Console.WriteLine($"Current selected indices: [{string.Join(", ", selectedTileIndices)}]");
        Console.WriteLine($"Center letter selected: {centerLetterSelected}, position: {centerLetterPosition}");

        try
        {
            if (index < 0 || index >= tileRack.Count)
            {
                Console.WriteLine($"Invalid index: {index}");
                return;
            }

            char selectedTile = tileRack[index];
            Console.WriteLine($"Attempting to select tile '{selectedTile}' at index {index}");

            if (!selectedTileIndices.Contains(index))
            {
                var newIndices = new List<int>(selectedTileIndices);
                newIndices.Add(index);
                selectedTileIndices = newIndices;
                
                // If center letter hasn't been selected yet, increment its future position
                if (!centerLetterSelected)
                {
                    centerLetterPosition = selectedTileIndices.Count;
                }
                
                Console.WriteLine($"Added index {index} to selection. Selected indices now: [{string.Join(", ", selectedTileIndices)}]");
                Console.WriteLine($"Center letter position is now: {centerLetterPosition}");
            }
            else
            {
                Console.WriteLine($"Index {index} was already selected");
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SelectTile: {ex.Message}");
        }
    }private void OnCellClick(int col)
    {
        Console.WriteLine($"OnCellClick: col={col}, centerLetterSelected={centerLetterSelected}");
        if (col == 7 && !centerLetterSelected)
        {
            centerLetterSelected = true;
            // If no tiles selected yet, position will be 0
            centerLetterPosition = 0;
            Console.WriteLine("Center letter selected, position set to 0");
            StateHasChanged();
        }
    }

    private void RemoveLetter(char letter, bool isCenter)
    {
        if (isCenter)
        {
            centerLetterSelected = false;
            centerLetterPosition = null;
        }
        else
        {
            var index = selectedTileIndices.FindIndex(i => tileRack[i] == letter);
            if (index != -1)
            {
                selectedTileIndices.RemoveAt(index);
            }
        }
        StateHasChanged();
    }

    private void PlayWord()
    {
        var word = GetSelectedWord();
        if (!word.Any() || !word.Any(w => w.isCenter)) return;

        var wordStr = string.Join("", word.Select(w => w.letter));
        var centerIndex = word.FindIndex(w => w.isCenter);
        var startCol = 7 - centerIndex;

        // Clear the board except center
        for (int i = 0; i < board.Length; i++)
        {
            if (i != 7) board[i] = '.';
        }

        // Place the word
        for (int i = 0; i < wordStr.Length; i++)
        {
            if ((startCol + i) >= 0 && (startCol + i) < board.Length)
            {
                board[startCol + i] = wordStr[i];
            }
        }

        // Score and cleanup
        lastWordScore = wordStr.Sum(c => letterScores[c]);
        currentScore += lastWordScore;

        // Replace used tiles
        foreach (var index in selectedTileIndices.OrderByDescending(i => i))
        {
            tileRack[index] = ScrabbleLetters[rng.Next(ScrabbleLetters.Length)];
        }

        ClearSelection();
    }

    private void ClearSelection()
    {
        selectedTileIndices.Clear();
        centerLetterSelected = false;
        centerLetterPosition = null;
        StateHasChanged();
    }    private void StartNewGame()
    {
        try
        {
            Console.WriteLine("Starting new game");
            ClearSelection();
            currentScore = 0;
            lastWordScore = 0;
            
            // Reset the board
            for (int i = 0; i < board.Length; i++)
            {
                board[i] = i == 7 ? ScrabbleLetters[rng.Next(ScrabbleLetters.Length)] : '.';
            }

            // Generate new tile rack
            var newTiles = new List<char>();
            for (int i = 0; i < 7; i++)
            {
                newTiles.Add(ScrabbleLetters[rng.Next(ScrabbleLetters.Length)]);
            }
            tileRack = newTiles;

            Console.WriteLine($"New tile rack: [{string.Join(", ", tileRack)}]");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in StartNewGame: {ex.Message}");
        }
    }

    private void ShuffleTiles()
    {
        ClearSelection();
        tileRack = Enumerable.Range(0, 7)
            .Select(_ => ScrabbleLetters[rng.Next(ScrabbleLetters.Length)])
            .ToList();
        StateHasChanged();
    }

    private string GetBoardCell(int col) => board[col] == '.' ? "" : board[col].ToString();    private List<(char letter, bool isCenter)> GetSelectedWord()
    {
        var word = new List<(char letter, bool isCenter)>();
        
        // If center letter is selected and position is valid
        if (centerLetterSelected && centerLetterPosition.HasValue)
        {
            // Add tiles before center letter
            for (int i = 0; i < centerLetterPosition.Value && i < selectedTileIndices.Count; i++)
            {
                word.Add((tileRack[selectedTileIndices[i]], false));
            }
            
            // Add center letter
            word.Add((board[7], true));
            
            // Add remaining tiles
            for (int i = centerLetterPosition.Value; i < selectedTileIndices.Count; i++)
            {
                word.Add((tileRack[selectedTileIndices[i]], false));
            }
        }
        else
        {
            // If no center letter selected, just add all selected tiles
            foreach (var index in selectedTileIndices)
            {
                word.Add((tileRack[index], false));
            }
        }
        
        Console.WriteLine($"Built word: {string.Join("", word.Select(w => w.letter))}");
        return word;
    }

    private bool HasSelectedLetters => selectedTileIndices.Any() || centerLetterSelected;

    // Constants
    private static readonly string ScrabbleLetters = "EEEEEEEEEEEEAAAAAAAAAIIIIIIIIONNNNNNRRRRRRTTTTTTLLLLSSSSUUUUDDDDGGGBBCCMMPPFFHHVVWWYYKJXQZ";
    private readonly Dictionary<char, int> letterScores = new()
    {
        {'A', 1}, {'B', 3}, {'C', 3}, {'D', 2}, {'E', 1},
        {'F', 4}, {'G', 2}, {'H', 4}, {'I', 1}, {'J', 8},
        {'K', 5}, {'L', 1}, {'M', 3}, {'N', 1}, {'O', 1},
        {'P', 3}, {'Q', 10}, {'R', 1}, {'S', 1}, {'T', 1},
        {'U', 1}, {'V', 4}, {'W', 4}, {'X', 8}, {'Y', 4},
        {'Z', 10}
    };
}

<style>
.scrabble-layout {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    padding: 1rem;
    gap: 2rem;
}

.game-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 1200px;
}

.score-display {
    background: #f8f9fa;
    padding: 1rem 2rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.score-display h3 {
    color: #2c5282;
    margin: 0 0 0.5rem 0;
    font-size: 1.5rem;
}

.score-display h4 {
    color: #4a5568;
    margin: 0;
    font-size: 1.2rem;
}

.scrabble-board {
    background: #fff;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    min-width: 800px;
}

.board-table {
    border-collapse: collapse;
    margin-bottom: 1rem;
    background: #fafafa;
    padding: 1rem;
    border-radius: 8px;
}

.board-cell {
    width: 60px;
    height: 60px;
    border: 1px solid #888;
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    background: #fff;
    transition: all 0.3s ease;
    cursor: default;
}

.board-cell.center-cell {
    background: #ffd700;
    color: #4a3305;
    box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
    cursor: pointer;
}

.board-cell.center-cell:hover:not(:empty) {
    background: #ffed4a;
    transform: scale(1.05);
}

.tile-rack {
    margin: 1rem 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
}

.tile-btn {
    width: 55px;
    height: 55px;
    font-size: 1.6rem;
    font-weight: bold;
    border: none;
    border-radius: 4px;
    background: linear-gradient(135deg, #f9ecd1 0%, #e6d5b0 100%);
    color: #4a3305;
    cursor: pointer;
    position: relative;
    box-shadow: 
        0 2px 4px rgba(0,0,0,0.2),
        inset 0 1px 1px rgba(255,255,255,0.7);
    text-shadow: 1px 1px 1px rgba(255,255,255,0.5);
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.letter-score {
    font-size: 0.8rem;
    position: absolute;
    bottom: 2px;
    right: 2px;
    color: #666;
}

.tile-btn::before {
    content: '';
    position: absolute;
    inset: 1px;
    border-radius: 3px;
    background: linear-gradient(135deg, rgba(255,255,255,0.2) 0%, transparent 100%);
    pointer-events: none;
}

.tile-btn:hover {
    transform: translateY(-2px);
    box-shadow: 
        0 4px 8px rgba(0,0,0,0.2),
        inset 0 1px 1px rgba(255,255,255,0.7);
    background: linear-gradient(135deg, #faf0db 0%, #eadcbb 100%);
}

.tile-btn:active {
    transform: translateY(1px);
    box-shadow: 
        0 1px 2px rgba(0,0,0,0.2),
        inset 0 1px 1px rgba(255,255,255,0.7);
}

.tile-btn.selected {
    background: linear-gradient(135deg, #ffe88f 0%, #ffc123 100%);
    color: #5a3f00;
    transform: scale(1.05);
    box-shadow: 
        0 3px 6px rgba(255,179,0,0.3),
        inset 0 1px 1px rgba(255,255,255,0.7);
}

.selected-word {
    margin: 1.5rem 0;
    padding: 1.5rem;
    font-size: 1.3rem;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    background: linear-gradient(to bottom, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 12px;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
    min-width: 400px;
}

.selected-word-label {
    font-weight: bold;
    color: #2c5282;
    text-shadow: 1px 1px 0 rgba(255,255,255,0.8);
    font-size: 1.2rem;
}

.built-word-tile {
    padding: 0.5rem;
    font-size: 1.4rem;
    font-weight: bold;
    background: #f9ecd1;
    border: none;
    border-radius: 4px;
    margin: 0 2px;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 40px;
}

.built-word-tile:hover {
    background: #ffed4a;
    transform: translateY(-2px);
}

.built-word-tile.center-letter {
    background: #ffd700;
    color: #4a3305;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.scrabble-controls {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
    justify-content: center;
}

.scrabble-controls button {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 4px;
    background: #4a5568;
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
}

.scrabble-controls button:hover {
    background: #2d3748;
    transform: translateY(-1px);
}

.instructions-section {
    width: 100%;
    max-width: 1000px;
    background: #fff;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-top: 1rem;
}

.instructions-section h2 {
    color: #2c5282;
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
}

.instructions-content {
    font-size: 1.1rem;
    line-height: 1.6;
    color: #4a5568;
}

.instructions-content ol {
    padding-left: 1.5rem;
}

.instructions-content ul {
    padding-left: 2rem;
    margin: 0.5rem 0;
}

.instructions-content li {
    margin-bottom: 1rem;
}

.instructions-content b {
    color: #2c5282;
}

.placeholder {
    color: #718096;
    font-style: italic;
}
</style>


