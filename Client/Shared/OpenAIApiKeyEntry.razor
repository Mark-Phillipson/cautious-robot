@inject BlazorApp.Client.Shared.IOpenAIApiKeyService OpenAIApiKeyService
@inject NavigationManager Navigation

<div class="openai-api-key-setup api-key-setup">
    <div class="setup-card">
        <h2>Enter Your OpenAI API Key</h2>
        <div class="setup-content">
            <p>To get AI-generated content, you'll need your own OpenAI API key.</p>
            <div class="api-key-info">
                <h3>How to get your free API key:</h3>
                <ol>
                    <li>Visit <a href="https://platform.openai.com/" target="_blank" rel="noopener">OpenAI Platform</a></li>
                    <li>Sign up for a free account (includes free credits)</li>
                    <li>Go to your dashboard and copy your API key</li>
                    <li>Paste it below to start playing</li>
                </ol>
            </div>
            
            <div class="api-key-input-section">                @if (!isOpenaiApiKeySaved)
                {
                    <label for="openaiApiKeyInput" class="api-key-label">Enter your OpenAI API key:</label>
                    <div class="input-group">
                        <input type="password"
                               id="openaiApiKeyInput"
                               name="openaiApiKey"
                               @bind="openaiUserApiKey"
                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveApiKey(); })"
                               placeholder="sk-..."
                               class="api-key-input" />
                        <button @onclick="SaveApiKey"
                                type="button"
                                class="start-game-btn"
                                disabled="@(string.IsNullOrWhiteSpace(openaiUserApiKey))">
                            Save Key
                        </button>
                    </div>
                }
                else
                {
                    <div class="api-key-saved">
                        <div class="saved-message">
                            âœ… <strong>OpenAI API Key Saved!</strong>
                        </div>
                        <div class="saved-details">
                            <small>Key: â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢</small>
                        </div>
                        <button @onclick="ChangeApiKey" class="change-key-btn">
                            Change Key
                        </button>
                    </div>
                }
                @if (!string.IsNullOrEmpty(openaiApiKeyValidationMessage))
                {                    <div class="api-validation-message @(openaiApiKeyValidationMessage.Contains("Validating") ? "validating" : "error")">
                        @openaiApiKeyValidationMessage
                    </div>
                }
            </div>
            <div class="privacy-note">
                <small>ðŸ”’ Your OpenAI API key is stored locally in your browser session only and is never saved or shared.</small>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnApiKeySaved { get; set; }
    private string openaiUserApiKey = string.Empty;
    private string? openaiApiKeyValidationMessage;
    private bool isOpenaiApiKeySaved = false;

    protected override async Task OnInitializedAsync()
    {
        openaiUserApiKey = await OpenAIApiKeyService.GetApiKeyAsync() ?? string.Empty;
        isOpenaiApiKeySaved = !string.IsNullOrEmpty(openaiUserApiKey);
    }    private async Task SaveApiKey()
    {
        if (string.IsNullOrWhiteSpace(openaiUserApiKey))
        {
            openaiApiKeyValidationMessage = "Please enter your OpenAI API key.";
            return;
        }
        
        if (!openaiUserApiKey.StartsWith("sk-"))
        {
            openaiApiKeyValidationMessage = "OpenAI API keys start with 'sk-'. Please check your key.";
            return;
        }
        
        openaiApiKeyValidationMessage = "Saving API key...";
        StateHasChanged();
        
        await OpenAIApiKeyService.SetApiKeyAsync(openaiUserApiKey);
        openaiApiKeyValidationMessage = "API key saved!";
        isOpenaiApiKeySaved = true;
        StateHasChanged();
        
        // Clear the success message after a delay
        await Task.Delay(2000);
        openaiApiKeyValidationMessage = "";
        StateHasChanged();
        
        if (OnApiKeySaved.HasDelegate)
        {
            await OnApiKeySaved.InvokeAsync();
        }
    }    private void ChangeApiKey()
    {
        isOpenaiApiKeySaved = false;
        openaiUserApiKey = "";
        openaiApiKeyValidationMessage = "";
        StateHasChanged();
    }
}
