@inject BlazorApp.Client.Shared.IWordsApiKeyService WordsApiKeyService
@inject NavigationManager Navigation

<div class="words-api-key-setup api-key-setup">    
    <div class="setup-card">
        <h2>Enter Your Words API Key</h2>
        <div class="setup-content">
            <p>To get word definitions and data, you'll need a Words API key from RapidAPI.</p>
            <div class="api-key-info">
                <h3>How to get your free API key:</h3>
                <ol>
                    <li>Visit <a href="https://rapidapi.com/dpventures/api/wordsapi/" target="_blank" rel="noopener">Words API on RapidAPI</a></li>
                    <li>Sign up for a free account (includes 500 free requests/day)</li>
                    <li>Subscribe to the Basic plan (free)</li>
                    <li>Copy your API key and paste it below</li>
                </ol>
            </div>            <div class="api-key-input-section">                @if (!isWordsApiKeySaved)
                {
                    <label for="wordsApiKeyInput" class="api-key-label">Enter your Words API key:</label>
                    <div class="input-group">
                        <input type="password"
                               id="wordsApiKeyInput"
                               name="wordsApiKey"
                               @bind="wordsUserApiKey"
                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveApiKey(); })"
                               placeholder="Your RapidAPI key..."
                               class="api-key-input" />
                        <button @onclick="SaveApiKey"
                                type="button"
                                class="start-game-btn"
                                disabled="@(string.IsNullOrWhiteSpace(wordsUserApiKey))">
                            Save Key
                        </button>
                    </div>
                }
                else
                {
                    <div class="api-key-saved">
                        <div class="saved-message">
                            âœ… <strong>Words API Key Saved!</strong>
                        </div>
                        <div class="saved-details">
                            <small>Key: â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢</small>
                        </div>
                        <button @onclick="ChangeApiKey" class="change-key-btn">
                            Change Key
                        </button>
                    </div>
                }
                @if (!string.IsNullOrEmpty(wordsApiKeyValidationMessage))
                {                    <div class="api-validation-message @(wordsApiKeyValidationMessage.Contains("Validating") ? "validating" : "error")">
                        @wordsApiKeyValidationMessage
                    </div>
                }
            </div>            <div class="privacy-note">
                <small>ðŸ”’ Your Words API key is stored locally in your browser session only and is never saved or shared.</small>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnApiKeySaved { get; set; }
    private string wordsUserApiKey = string.Empty;
    private string? wordsApiKeyValidationMessage;
    private bool isWordsApiKeySaved = false;

    protected override async Task OnInitializedAsync()
    {
        wordsUserApiKey = await WordsApiKeyService.GetApiKeyAsync() ?? string.Empty;
        isWordsApiKeySaved = !string.IsNullOrEmpty(wordsUserApiKey);
    }    private async Task SaveApiKey()
    {
        if (string.IsNullOrWhiteSpace(wordsUserApiKey))
        {
            wordsApiKeyValidationMessage = "Please enter your Words API key.";
            return;
        }
        
        wordsApiKeyValidationMessage = "Saving API key...";
        StateHasChanged();
        
        await WordsApiKeyService.SetApiKeyAsync(wordsUserApiKey);
        wordsApiKeyValidationMessage = "API key saved!";
        isWordsApiKeySaved = true;
        StateHasChanged();
        
        // Clear the success message after a delay
        await Task.Delay(2000);
        wordsApiKeyValidationMessage = "";
        StateHasChanged();
        
        if (OnApiKeySaved.HasDelegate)
        {
            await OnApiKeySaved.InvokeAsync();
        }
    }    private void ChangeApiKey()
    {
        isWordsApiKeySaved = false;
        wordsUserApiKey = "";
        wordsApiKeyValidationMessage = "";
        StateHasChanged();
    }
}
